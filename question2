.global _start

.equ LED_MEMORY, 0xFF200000
.equ HEX_03, 0xFF200020
.equ HEX_45, 0xFF200030
.equ SW_MEMORY, 0xFF200040
.equ PB_MEMORY, 0xFF200050
.equ PB_INTERRUPT_MASK, 0xFF200058
ARRAY: .word 0x3F, 6, 0x58, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F, 0x77, 0x7c, 0x39, 0x5E, 0x79, 0x71

_start:

@MOV R1, #15 // value to display
@MOV R0, #1 //1 2 4 8
@BL HEX_write_ASM

@MOV R0, #4
@B HEX_clear_ASM

B read_PB_data_ASM
B END

read_slider_switches_ASM:
    LDR R1, =SW_MEMORY
    LDR R0, [R1]
    BX  LR

write_LEDs_ASM:
    LDR R1, =LED_MEMORY
    STR R0, [R1]
    BX  LR
	
	// R1 > 15?
HEX_write_ASM:
	PUSH {R0, R1, R2, R3}
	LDR R3, =HEX_03
	LDR R2, =ARRAY
	LDR R2, [R2, R1, LSL#2]
	CMP R0, #1
	STREQ R2, [R3]
	POP {R0, R1, R2, R3}
	BX LR
	
HEX_flood_ASM:
	PUSH {R0, R1, R2, R3, R4}
	LDR R1, =HEX_45
	LDR R2, =0xFFFF
	STR R2, [R1]
	
	LDR R3, =0xFF
	LDR R4, =HEX_03
	
	CMP R0, #1
	STREQB R3, [R4]
	
	CMP R0, #2
	STREQB R3, [R4, #1]
	
	CMP R0, #4
	STREQB R3, [R4, #2]
	
	CMP R0, #8
	STREQB R3, [R4, #3]
	
	POP {R0, R1, R2, R3, R4}
	BX LR
	
HEX_clear_ASM:
	PUSH {R0, R1, R2, R3, R4}
	LDR R1, =HEX_45
	LDR R2, =0xFFFF
	STR R2, [R1]
	
	LDR R3, =0x00
	LDR R4, =HEX_03
	
	CMP R0, #1
	STREQB R3, [R4]
	
	CMP R0, #2
	STREQB R3, [R4, #1]
	
	CMP R0, #4
	STREQB R3, [R4, #2]
	
	CMP R0, #8
	STREQB R3, [R4, #3]
	
	POP {R0, R1, R2, R3, R4}
	BX LR
	
read_PB_data_ASM:
	Push {R0, R1, R2, R3}
	LDR R0, =PB
	LDR R1, [R0]
	
	CMP R1, #1
	STREQ R3, [R0]
	
	CMP R1, #2
	STREQ R3, [R0, #1]
	
	CMP R1, #4
	STREQ R3, [R0, #2]
	
	CMP R1, #8
	STREQ R3, [R0, #3]
	
	Pop {R0, R1, R2, R3}
	BX LR

read_PB_edgecp_ASM:
	PUSH {R1}
	LDR R1, =PB_MEMORY
    LDR R0, [R1]
	POP {R0}
    BX  LR
		
PB_clear_edgecp_ASM: 
	PUSH {R1}
	MOV R0, #0
	LDR R1, =PB_MEMORY
	STR R0, [R1]
	POP {R0}
	BX LR
	
enable_PB_INT_ASM:
	PUSH {R1, R3}
	LDR R0, =PB_INTERRUPT_MASK
	LDR R1, [R0]
	MOV R3, #1

	CMP R1, #1
	STREQ R3, [R0]
	
	CMP R1, #2
	STREQ R3, [R0, #1]
	
	CMP R1, #4
	STREQ R3, [R0, #2]
	
	CMP R1, #8
	STREQ R3, [R0, #3]
	
	POP {R1, R3}
	BX LR
	
	
// disable_PB_INT_ASM:


	
END:
	B END
