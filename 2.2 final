.global _start

.equ LOAD_ADDRESS, 0xFFFEC600
.equ CONTROL_ADDRESS, 0xFFFEC608
.equ INTERRUPT_STATUS, 0xFFFEC60C
.equ HEX_03, 0xFF200020
.equ HEX_45, 0xFF200030
.equ PB_MEMORY, 0xFF200050

_start:

LDR R1, =#2000000 //2M to configure millisecond timer

	PUSH {LR}
	BL ARM_TIM_config_ASM
	POP {LR}
	
// initializing counters corresponding to value displayed in Displays 1-6
	MOV R9, #0 // 1
	MOV R8, #0 // 2
	MOV R7, #0 // 3
	MOV R6, #0 // 4
	MOV R5, #0 // 5
	MOV R4, #0 // 6
	
	
STOP_WATCH:
// storing the values of the pushbuttons pressed and released into register R3
	PUSH {LR}
	BL read_PB_edgecp_ASM
	POP {LR}
	
	// If R3 = 1 (PB0) -> start counter
	TST R3, #1
	PUSH {LR}
	BLNE ARM_TIM_read_INT_ASM
	POP {LR}
	
	// If R3 = 2 (PB1) -> stop counter
	TST R3, #2
	BLNE PB_clear_edgecp_ASM
	BLNE STOP_WATCH
	
	// If R3 = 4 (PB2) -> reset counter
	TST R3, #4
	// Reseting counter by setting counter values (R4 - R9) to 0
	ANDNE R9, R9, #0
	ANDNE R8, R8, #0
	ANDNE R7, R7, #0	
	ANDNE R6, R6, #0
	ANDNE R5, R5, #0
	ANDNE R4, R4, #0
	// 
	BLNE PB_clear_edgecp_ASM
	BLNE STOP_WATCH
	
	CMP R0, #1
	BLEQ ARM_TIM_clear_INT_ASM
	
// Incrementing counters R9, R8, R7, R5, R4 to 10 and resetting them if equal
// This is because the corresponding displays are required to increment to 9 before resetting and incrementing again
	ADDEQ R9, R9, #1
	CMP R9, #10
	MOVEQ R9, #0
	
	ADDEQ R8, R8, #1
	CMP R8, #10
	MOVEQ R8, #0

	ADDEQ R7, R7, #1
	CMP R7, #10
	MOVEQ R7, #0

// Incremening R6 and comparing it to 6 before resetting it
// This is because R6 (display 4) is only supposed to increment to 5 before resetting as the display represents minutes in the stopwatch 
	ADDEQ R6, R6, #1
	CMP R6, #6 // SHOULD THIS BE 7?
	MOVEQ R6, #0

	ADDEQ R5, R5, #1
	CMP R5, #10
	MOVEQ R5, #0

	ADDEQ R4, R4, #1
	CMP R4, #10
	MOVEQ R4, #0

	PUSH {LR}
	BL HEX_write_ASM_1
	POP {LR}
	PUSH {LR}
	BL HEX_write_ASM_2
	POP {LR}
	PUSH {LR}
	BL HEX_write_ASM_3
	POP {LR}	
	PUSH {LR}
	BL HEX_write_ASM_4
	POP {LR}	
	PUSH {LR}
	BL HEX_write_ASM_5
	POP {LR}	
	PUSH {LR}
	BL HEX_write_ASM_6
	POP {LR}
	
	MOV R0, #0
	B STOP_WATCH

read_PB_edgecp_ASM:
	PUSH {R1}
	LDR R1, =PB_MEMORY
	// Loading edgecapture register bit from Base + C into R3
   	LDR R3, [R1, #12]
	POP {R1}
    BX LR
	
PB_clear_edgecp_ASM: 
	PUSH {R1}
	LDR R1, =PB_MEMORY
	STR R3, [R1, #12]
	POP {R1}
	BX LR

ARM_TIM_config_ASM:
	PUSH {R2, R3, R4}
	LDR R2, =LOAD_ADDRESS
	LDR R3, =CONTROL_ADDRESS
// Storing load value into load address
	STR R1, [R2]
	MOV R4, #0b0000011
// Setting control bits A and E to 1 in Control Register
// this is to start the timer and to continue the timer
	STRB R4, [R3]
	POP {R2, R3, R4}
	BX LR

ARM_TIM_read_INT_ASM:
	PUSH {R2, R3}
	LDR R2, =INTERRUPT_STATUS
	LDR R0, [R2]
	POP {R2, R3}
	BX LR

ARM_TIM_clear_INT_ASM:
	PUSH {R2, R3}
	LDR R2, =INTERRUPT_STATUS
	MOV R3, #0x00000001
	STR R3, [R2]
	POP {R2, R3}
	BX LR

// Checking which value to write into the first Display
// This was done by comparing the value of the first counter (R9) to the hex representation of values 1-9
// Similar process was conducted for 5 other HEX_WRITE_ASM subroutines using the respective counters
HEX_write_ASM_1:
	PUSH {R3, R5}
	LDR R3, =HEX_03

	CMP R9, #0
	MOVEQ R5, #0x3F
	STREQB R5, [R3]
	
	CMP R9, #1
	MOVEQ R5, #6
	STREQB R5, [R3]
	
	CMP R9, #2
	MOVEQ R5, #0x5B
	STREQB R5, [R3]
	
	CMP R9, #3
	MOVEQ R5, #0x4F
	STREQB R5, [R3]
	
	CMP R9, #4
	MOVEQ R5, #0x66
	STREQB R5, [R3]
	
	CMP R9, #5
	MOVEQ R5, #0x6D
	STREQB R5, [R3]
	
	CMP R9, #6
	MOVEQ R5, #0x7D
	STREQB R5, [R3]
	
	CMP R9, #7
	MOVEQ R5, #0x07
	STREQB R5, [R3]
	
	CMP R9, #8
	MOVEQ R5, #0x7F
	STREQB R5, [R3]
	
	CMP R9, #9
	MOVEQ R5, #0x6F
	STREQB R5, [R3]

	POP {R3, R5}
	BX LR
	
HEX_write_ASM_2:
	PUSH {R3, R5}
	LDR R3, =HEX_03

	CMP R8, #0
	MOVEQ R5, #0x3F
	STREQB R5, [R3, #1]
	
	CMP R8, #1
	MOVEQ R5, #6
	STREQB R5, [R3, #1]
	
	CMP R8, #2
	MOVEQ R5, #0x5B
	STREQB R5, [R3, #1]
	
	CMP R8, #3
	MOVEQ R5, #0x4F
	STREQB R5, [R3, #1]
	
	CMP R8, #4
	MOVEQ R5, #0x66
	STREQB R5, [R3, #1]
	
	CMP R8, #5
	MOVEQ R5, #0x6D
	STREQB R5, [R3, #1]
	
	CMP R8, #6
	MOVEQ R5, #0x7D
	STREQB R5, [R3, #1]
	
	CMP R8, #7
	MOVEQ R5, #0x07
	STREQB R5, [R3, #1]
	
	CMP R8, #8
	MOVEQ R5, #0x7F
	STREQB R5, [R3, #1]
	
	CMP R8, #9
	MOVEQ R5, #0x6F
	STREQB R5, [R3, #1]

	POP {R3, R5}
	BX LR
	
HEX_write_ASM_3:
	PUSH {R3, R5}
	LDR R3, =HEX_03

	CMP R7, #0
	MOVEQ R5, #0x3F
	STREQB R5, [R3, #2]
	
	CMP R7, #1
	MOVEQ R5, #6
	STREQB R5, [R3, #1]
	
	CMP R7, #2
	MOVEQ R5, #6
	STREQB R5, [R3, #2]
	
	CMP R7, #2
	MOVEQ R5, #0x5B
	STREQB R5, [R3, #2]
	
	CMP R7, #3
	MOVEQ R5, #0x4F
	STREQB R5, [R3, #2]
	
	CMP R7, #4
	MOVEQ R5, #0x66
	STREQB R5, [R3, #2]
	
	CMP R7, #5
	MOVEQ R5, #0x6D
	STREQB R5, [R3, #2]
	
	CMP R7, #6
	MOVEQ R5, #0x7D
	STREQB R5, [R3, #2]
	
	CMP R7, #7
	MOVEQ R5, #0x07
	STREQB R5, [R3, #2]
	
	CMP R7, #8
	MOVEQ R5, #0x7F
	STREQB R5, [R3, #2]
	
	CMP R7, #9
	MOVEQ R5, #0x6F
	STREQB R5, [R3, #2]

	POP {R3, R5}
	BX LR
	
HEX_write_ASM_4:
	PUSH {R3, R5}
	LDR R3, =HEX_03

	CMP R6, #0
	MOVEQ R5, #0x3F
	STREQB R5, [R3, #3]
	
	CMP R6, #1
	MOVEQ R5, #6
	STREQB R5, [R3, #3]
	
	CMP R6, #2
	MOVEQ R5, #0x5B
	STREQB R5, [R3, #3]
	
	CMP R6, #3
	MOVEQ R5, #0x4F
	STREQB R5, [R3, #3]
	
	CMP R6, #4
	MOVEQ R5, #0x66
	STREQB R5, [R3, #3]
	
	CMP R6, #5
	MOVEQ R5, #0x6D
	STREQB R5, [R3, #3]
	
	CMP R6, #6
	MOVEQ R5, #0x7D
	STREQB R5, [R3, #3]
	
	POP {R3, R5}
	BX LR
	
HEX_write_ASM_5:
	PUSH {R3, R5}
	LDR R3, =HEX_45

	CMP R5, #0
	MOVEQ R5, #0x3F
	STREQB R5, [R3]
	
	CMP R5, #1
	MOVEQ R5, #6
	STREQB R5, [R3]
	
	CMP R5, #2
	MOVEQ R5, #0x5B
	STREQB R5, [R3]
	
	CMP R5, #3
	MOVEQ R5, #0x4F
	STREQB R5, [R3]
	
	CMP R5, #4
	MOVEQ R5, #0x66
	STREQB R5, [R3]
	
	CMP R5, #5
	MOVEQ R5, #0x6D
	STREQB R5, [R3]
	
	CMP R5, #6
	MOVEQ R5, #0x7D
	STREQB R5, [R3]
	
	CMP R5, #7
	MOVEQ R5, #0x07
	STREQB R5, [R3]
	
	CMP R5, #8
	MOVEQ R5, #0x7F
	STREQB R5, [R3]
	
	CMP R5, #9
	MOVEQ R5, #0x6F
	STREQB R5, [R3]

	POP {R3, R5}
	BX LR
	
HEX_write_ASM_6:
	PUSH {R3, R5}
	LDR R3, =HEX_45

	CMP R4, #0
	MOVEQ R5, #0x3F
	STREQB R5, [R3, #1]
	
	CMP R4, #1
	MOVEQ R5, #6
	STREQB R5, [R3, #1]
	
	CMP R4, #2
	MOVEQ R5, #0x5B
	STREQB R5, [R3, #1]
	
	CMP R4, #3
	MOVEQ R5, #0x4F
	STREQB R5, [R3, #1]
	
	CMP R4, #4
	MOVEQ R5, #0x66
	STREQB R5, [R3, #1]
	
	CMP R4, #5
	MOVEQ R5, #0x6D
	STREQB R5, [R3, #1]
	
	CMP R4, #6
	MOVEQ R5, #0x7D
	STREQB R5, [R3, #1]
	
	CMP R4, #7
	MOVEQ R5, #0x07
	STREQB R5, [R3, #1]
	
	CMP R4, #8
	MOVEQ R5, #0x7F
	STREQB R5, [R3, #1]
	
	CMP R4, #9
	MOVEQ R5, #0x6F
	STREQB R5, [R3, #1]
	POP {R3, R5}
	BX LR

// Infinite loop to terminate the program
END:
	B END
