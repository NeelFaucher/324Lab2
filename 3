.section .vectors, "ax"
B _start
B SERVICE_UND       // undefined instruction vector
B SERVICE_SVC       // software interrupt vector
B SERVICE_ABT_INST  // aborted prefetch vector
B SERVICE_ABT_DATA  // aborted data vector
.word 0 // unused vector
B SERVICE_IRQ       // IRQ interrupt vector
B SERVICE_FIQ       // FIQ interrupt vector

.text
.global _start

PB_int_flag: .word 0x0
tim_int_flag: .word 0x0
.equ PB_MEMORY, 0xFF200050
.equ PB_INTERRUPT_MASK, 0xFF200058
.equ LOAD_ADDRESS, 0xFFFEC600
.equ CONTROL_ADDRESS, 0xFFFEC608
.equ INTERRUPT_STATUS, 0xFFFEC60C
.equ HEX_03, 0xFF200020
.equ HEX_45, 0xFF200030

_start:
    /* Set up stack pointers for IRQ and SVC processor modes */
    MOV        R1, #0b11010010      // interrupts masked, MODE = IRQ
    MSR        CPSR_c, R1           // change to IRQ mode
    LDR        SP, =0xFFFFFFFF - 3  // set IRQ stack to A9 onchip memory
    /* Change to SVC (supervisor) mode with interrupts disabled */
    MOV        R1, #0b11010011      // interrupts masked, MODE = SVC
    MSR        CPSR, R1             // change to supervisor mode
    LDR        SP, =0x3FFFFFFF - 3  // set SVC stack to top of DDR3 memory
    BL     CONFIG_GIC           // configure the ARM GIC
    // To DO: write to the pushbutton KEY interrupt mask register
    // Or, you can call enable_PB_INT_ASM subroutine from previous task
    // to enable interrupt for ARM A9 private timer, use ARM_TIM_config_ASM subroutine
	
	BL enable_PB_INT_ASM
	LDR R0, =#2000000
	BL ARM_TIM_config_ASM
	
    LDR        R0, =0xFF200050      // pushbutton KEY base address
    MOV        R1, #0xF             // set interrupt mask bits
    STR        R1, [R0, #0x8]       // interrupt mask register (base + 8)
    // enable IRQ interrupts in the processor
    MOV        R0, #0b01010011      // IRQ unmasked, MODE = SVC
    MSR        CPSR_c, R0
IDLE:
	LDR R9, =PB_int_flag
	LDR R3, [R9]

	// If R3 = 1 (PB0) -> start counter
	TST R3, #1
	LDR R8, =tim_int_flag
	LDR R0, [R8]
	BL read_PB_edgecp_ASM
	
	// If R3 = 2 (PB1) -> stop counter
	TST R3, #2
	MOVNE R3, #0
	BLNE IDLE
	
	// If R3 = 4 (PB2) -> reset counter
	TST R3, #4
	// Reseting counter by setting counter values (R4 - R9) to 0
	ANDNE R9, R9, #0
	ANDNE R8, R8, #0
	ANDNE R7, R7, #0	
	ANDNE R6, R6, #0
	ANDNE R5, R5, #0
	ANDNE R4, R4, #0
	BLNE PB_clear_edgecp_ASM
	BLNE IDLE
	
	CMP R0, #1
	BLEQ ARM_TIM_clear_INT_ASM
	
// Incrementing counters R9, R8, R7, R5, R4 to 10 and resetting them if equal
// This is because the corresponding displays are required to increment to 9 before resetting and incrementing again
	ADDEQ R9, R9, #1
	CMP R9, #10
	MOVEQ R9, #0
	
	ADDEQ R8, R8, #1
	CMP R8, #10
	MOVEQ R8, #0

	ADDEQ R7, R7, #1
	CMP R7, #10
	MOVEQ R7, #0

// Incremening R6 and comparing it to 6 before resetting it
// This is because R6 (display 4) is only supposed to increment to 5 before resetting as the display represents minutes in the stopwatch 
	ADDEQ R6, R6, #1
	CMP R6, #6 // SHOULD THIS BE 7?
	MOVEQ R6, #0

	ADDEQ R5, R5, #1
	CMP R5, #10
	MOVEQ R5, #0

	ADDEQ R4, R4, #1
	CMP R4, #10
	MOVEQ R4, #0

	PUSH {LR}
	BL HEX_write_ASM_1
	POP {LR}
	PUSH {LR}
	BL HEX_write_ASM_2
	POP {LR}
	PUSH {LR}
	BL HEX_write_ASM_3
	POP {LR}	
	PUSH {LR}
	BL HEX_write_ASM_4
	POP {LR}	
	PUSH {LR}
	BL HEX_write_ASM_5
	POP {LR}	
	PUSH {LR}
	BL HEX_write_ASM_6
	POP {LR}

	MOV R0, #0

    B IDLE // This is where you write your objective task
	
/*--- Undefined instructions ---------------------------------------- */
SERVICE_UND:
    B SERVICE_UND
/*--- Software interrupts ------------------------------------------- */
SERVICE_SVC:
    B SERVICE_SVC
/*--- Aborted data reads -------------------------------------------- */
SERVICE_ABT_DATA:
    B SERVICE_ABT_DATA
/*--- Aborted instruction fetch ------------------------------------- */
SERVICE_ABT_INST:
    B SERVICE_ABT_INST
/*--- IRQ ----------------------------------------------------------- */
SERVICE_IRQ:
    PUSH {R0-R7, LR}
/* Read the ICCIAR from the CPU Interface */
    LDR R4, =0xFFFEC100
    LDR R5, [R4, #0x0C] // read from ICCIAR

/* To Do: Check which interrupt has occurred (check interrupt IDs)


   Then call the corresponding ISR
   If the ID is not recognized, branch to UNEXPECTED
   See the assembly example provided in the De1-SoC Computer_Manual on page 46 */

    CMP R5, #73
	BLEQ KEY_ISR
	
	CMP R5, #29
	BLEQ ARM_TIM_ISR

UNEXPECTED:
	CMP R5, #29
	BEQ EXIT_IRQ
	CMP R5, #73
    BNE UNEXPECTED      // if not recognized, stop here
    BL KEY_ISR
EXIT_IRQ:
/* Write to the End of Interrupt Register (ICCEOIR) */
    STR R5, [R4, #0x10] // write to ICCEOIR
    POP {R0-R7, LR}
SUBS PC, LR, #4
/*--- FIQ ----------------------------------------------------------- */
SERVICE_FIQ:
    B SERVICE_FIQ
	
CONFIG_GIC:
    PUSH {LR}
/* To configure the FPGA KEYS interrupt (ID 73):
* 1. set the target to cpu0 in the ICDIPTRn register
* 2. enable the interrupt in the ICDISERn register */
/* CONFIG_INTERRUPT (int_ID (R0), CPU_target (R1)); */
/* To Do: you can configure different interrupts
   by passing their IDs to R0 and repeating the next 3 lines */
   
	MOV R0, #29            // KEY port (Interrupt ID = 73)
    MOV R1, #1             // this field is a bit-mask; bit 0 targets cpu0
    BL CONFIG_INTERRUPT
   
    MOV R0, #73            // KEY port (Interrupt ID = 73)
    MOV R1, #1             // this field is a bit-mask; bit 0 targets cpu0
    BL CONFIG_INTERRUPT

/* configure the GIC CPU Interface */
    LDR R0, =0xFFFEC100    // base address of CPU Interface
/* Set Interrupt Priority Mask Register (ICCPMR) */
    LDR R1, =0xFFFF        // enable interrupts of all priorities levels
    STR R1, [R0, #0x04]
/* Set the enable bit in the CPU Interface Control Register (ICCICR).
* This allows interrupts to be forwarded to the CPU(s) */
    MOV R1, #1
    STR R1, [R0]
/* Set the enable bit in the Distributor Control Register (ICDDCR).
* This enables forwarding of interrupts to the CPU Interface(s) */
    LDR R0, =0xFFFED000
    STR R1, [R0]
    POP {PC}

/*
* Configure registers in the GIC for an individual Interrupt ID
* We configure only the Interrupt Set Enable Registers (ICDISERn) and
* Interrupt Processor Target Registers (ICDIPTRn). The default (reset)
* values are used for other registers in the GIC
* Arguments: R0 = Interrupt ID, N
* R1 = CPU target
*/
CONFIG_INTERRUPT:
    PUSH {R4-R5, LR}
/* Configure Interrupt Set-Enable Registers (ICDISERn).
* reg_offset = (integer_div(N / 32) * 4
* value = 1 << (N mod 32) */
    LSR R4, R0, #3    // calculate reg_offset
    BIC R4, R4, #3    // R4 = reg_offset
    LDR R2, =0xFFFED100
    ADD R4, R2, R4    // R4 = address of ICDISER
    AND R2, R0, #0x1F // N mod 32
    MOV R5, #1        // enable
    LSL R2, R5, R2    // R2 = value
/* Using the register address in R4 and the value in R2 set the
* correct bit in the GIC register */
    LDR R3, [R4]      // read current register value
    ORR R3, R3, R2    // set the enable bit
    STR R3, [R4]      // store the new register value
/* Configure Interrupt Processor Targets Register (ICDIPTRn)
* reg_offset = integer_div(N / 4) * 4
* index = N mod 4 */
    BIC R4, R0, #3    // R4 = reg_offset
    LDR R2, =0xFFFED800
    ADD R4, R2, R4    // R4 = word address of ICDIPTR
    AND R2, R0, #0x3  // N mod 4
    ADD R4, R2, R4    // R4 = byte address in ICDIPTR
/* Using register address in R4 and the value in R2 write to
* (only) the appropriate byte */
    STRB R1, [R4]
    POP {R4-R5, PC}

KEY_ISR:
	PUSH {R9, LR}
	BL read_PB_edgecp_ASM
	LDR R9, =PB_int_flag
	STR R0, [R9]	
	BL PB_clear_edgecp_ASM
	POP {R9, LR}
	BX LR
	
ARM_TIM_ISR:
	PUSH {R8, R9}
	BL read_PB_edgecp_ASM
	//cmp
	LDR R9, =tim_int_flag
	MOV R8, #1
	STR R8, [R9]	
	BL PB_clear_edgecp_ASM
	POP {R8, R9}
	BX LR

read_PB_edgecp_ASM:
	PUSH {R1}
	LDR R1, =PB_MEMORY
    LDR R0, [R1, #12]
	POP {R1}
    BX  LR
	
enable_PB_INT_ASM:
	PUSH {R2, R9}
	LDR R9, =PB_INTERRUPT_MASK

	TST R0, #1
	ORRGT R2, R0, #1
	STRNE R2, [R9]
	
	TST R0, #2
	ORRGT R2, R0, #1
	STRNE R2, [R9]
	
	TST R0, #4
	ORRGT R2, R0, #1
	STRNE R2, [R9]
	
	TST R0, #8
	ORRGT R2, R0, #1
	STRNE R2, [R9]
	
	POP {R2, R9}
	BX LR

ARM_TIM_config_ASM:
	PUSH {R2, R3, R4}
	LDR R2, =LOAD_ADDRESS
	LDR R3, =CONTROL_ADDRESS

	STR R0, [R2]
	MOV R4, #0b0000011
	STRB R4, [R3]
	POP {R2, R3, R4}
	BX LR
	
PB_clear_edgecp_ASM: 
	PUSH {R1}
	LDR R1, =PB_MEMORY
	STR R0, [R1, #12]
	POP {R1}
	BX LR
	
HEX_write_ASM_1:
	PUSH {R3, R5}
	LDR R3, =HEX_03

	CMP R9, #0
	MOVEQ R5, #0x3F
	STREQB R5, [R3]
	
	CMP R9, #1
	MOVEQ R5, #6
	STREQB R5, [R3]
	
	CMP R9, #2
	MOVEQ R5, #0x5B
	STREQB R5, [R3]
	
	CMP R9, #3
	MOVEQ R5, #0x4F
	STREQB R5, [R3]
	
	CMP R9, #4
	MOVEQ R5, #0x66
	STREQB R5, [R3]
	
	CMP R9, #5
	MOVEQ R5, #0x6D
	STREQB R5, [R3]
	
	CMP R9, #6
	MOVEQ R5, #0x7D
	STREQB R5, [R3]
	
	CMP R9, #7
	MOVEQ R5, #0x07
	STREQB R5, [R3]
	
	CMP R9, #8
	MOVEQ R5, #0x7F
	STREQB R5, [R3]
	
	CMP R9, #9
	MOVEQ R5, #0x6F
	STREQB R5, [R3]

	POP {R3, R5}
	BX LR
	
HEX_write_ASM_2:
	PUSH {R3, R5}
	LDR R3, =HEX_03

	CMP R8, #0
	MOVEQ R5, #0x3F
	STREQB R5, [R3, #1]
	
	CMP R8, #1
	MOVEQ R5, #6
	STREQB R5, [R3, #1]
	
	CMP R8, #2
	MOVEQ R5, #0x5B
	STREQB R5, [R3, #1]
	
	CMP R8, #3
	MOVEQ R5, #0x4F
	STREQB R5, [R3, #1]
	
	CMP R8, #4
	MOVEQ R5, #0x66
	STREQB R5, [R3, #1]
	
	CMP R8, #5
	MOVEQ R5, #0x6D
	STREQB R5, [R3, #1]
	
	CMP R8, #6
	MOVEQ R5, #0x7D
	STREQB R5, [R3, #1]
	
	CMP R8, #7
	MOVEQ R5, #0x07
	STREQB R5, [R3, #1]
	
	CMP R8, #8
	MOVEQ R5, #0x7F
	STREQB R5, [R3, #1]
	
	CMP R8, #9
	MOVEQ R5, #0x6F
	STREQB R5, [R3, #1]

	POP {R3, R5}
	BX LR
	
HEX_write_ASM_3:
	PUSH {R3, R5}
	LDR R3, =HEX_03

	CMP R7, #0
	MOVEQ R5, #0x3F
	STREQB R5, [R3, #2]
	
	CMP R7, #1
	MOVEQ R5, #6
	STREQB R5, [R3, #1]
	
	CMP R7, #2
	MOVEQ R5, #6
	STREQB R5, [R3, #2]
	
	CMP R7, #2
	MOVEQ R5, #0x5B
	STREQB R5, [R3, #2]
	
	CMP R7, #3
	MOVEQ R5, #0x4F
	STREQB R5, [R3, #2]
	
	CMP R7, #4
	MOVEQ R5, #0x66
	STREQB R5, [R3, #2]
	
	CMP R7, #5
	MOVEQ R5, #0x6D
	STREQB R5, [R3, #2]
	
	CMP R7, #6
	MOVEQ R5, #0x7D
	STREQB R5, [R3, #2]
	
	CMP R7, #7
	MOVEQ R5, #0x07
	STREQB R5, [R3, #2]
	
	CMP R7, #8
	MOVEQ R5, #0x7F
	STREQB R5, [R3, #2]
	
	CMP R7, #9
	MOVEQ R5, #0x6F
	STREQB R5, [R3, #2]

	POP {R3, R5}
	BX LR
	
HEX_write_ASM_4:
	PUSH {R3, R5}
	LDR R3, =HEX_03

	CMP R6, #0
	MOVEQ R5, #0x3F
	STREQB R5, [R3, #3]
	
	CMP R6, #1
	MOVEQ R5, #6
	STREQB R5, [R3, #3]
	
	CMP R6, #2
	MOVEQ R5, #0x5B
	STREQB R5, [R3, #3]
	
	CMP R6, #3
	MOVEQ R5, #0x4F
	STREQB R5, [R3, #3]
	
	CMP R6, #4
	MOVEQ R5, #0x66
	STREQB R5, [R3, #3]
	
	CMP R6, #5
	MOVEQ R5, #0x6D
	STREQB R5, [R3, #3]
	
	CMP R6, #6
	MOVEQ R5, #0x7D
	STREQB R5, [R3, #3]
	
	POP {R3, R5}
	BX LR
	
HEX_write_ASM_5:
	PUSH {R3, R5}
	LDR R3, =HEX_45

	CMP R5, #0
	MOVEQ R5, #0x3F
	STREQB R5, [R3]
	
	CMP R5, #1
	MOVEQ R5, #6
	STREQB R5, [R3]
	
	CMP R5, #2
	MOVEQ R5, #0x5B
	STREQB R5, [R3]
	
	CMP R5, #3
	MOVEQ R5, #0x4F
	STREQB R5, [R3]
	
	CMP R5, #4
	MOVEQ R5, #0x66
	STREQB R5, [R3]
	
	CMP R5, #5
	MOVEQ R5, #0x6D
	STREQB R5, [R3]
	
	CMP R5, #6
	MOVEQ R5, #0x7D
	STREQB R5, [R3]
	
	CMP R5, #7
	MOVEQ R5, #0x07
	STREQB R5, [R3]
	
	CMP R5, #8
	MOVEQ R5, #0x7F
	STREQB R5, [R3]
	
	CMP R5, #9
	MOVEQ R5, #0x6F
	STREQB R5, [R3]

	POP {R3, R5}
	BX LR

HEX_write_ASM_6:
	PUSH {R3, R5}
	LDR R3, =HEX_45

	CMP R4, #0
	MOVEQ R5, #0x3F
	STREQB R5, [R3, #1]
	
	CMP R4, #1
	MOVEQ R5, #6
	STREQB R5, [R3, #1]
	
	CMP R4, #2
	MOVEQ R5, #0x5B
	STREQB R5, [R3, #1]
	
	CMP R4, #3
	MOVEQ R5, #0x4F
	STREQB R5, [R3, #1]
	
	CMP R4, #4
	MOVEQ R5, #0x66
	STREQB R5, [R3, #1]
	
	CMP R4, #5
	MOVEQ R5, #0x6D
	STREQB R5, [R3, #1]
	
	CMP R4, #6
	MOVEQ R5, #0x7D
	STREQB R5, [R3, #1]
	
	CMP R4, #7
	MOVEQ R5, #0x07
	STREQB R5, [R3, #1]
	
	CMP R4, #8
	MOVEQ R5, #0x7F
	STREQB R5, [R3, #1]
	
	CMP R4, #9
	MOVEQ R5, #0x6F
	STREQB R5, [R3, #1]
	POP {R3, R5}
	BX LR

ARM_TIM_read_INT_ASM:
	PUSH {R2, R3}
	LDR R2, =INTERRUPT_STATUS
	LDR R0, [R2]
	POP {R2, R3}
	BX LR

ARM_TIM_clear_INT_ASM:
	PUSH {R2, R3}
	LDR R2, =INTERRUPT_STATUS
	MOV R3, #0x00000001
	STR R3, [R2]
	POP {R2, R3}
	BX LR

END_KEY_ISR:
    BX LR
