.global _start

.equ LOAD_ADDRESS, 0xFFFEC600
.equ LED_MEMORY, 0xFF200000
.equ CONTROL_ADDRESS, 0xFFFEC608
.equ INTERRUPT_STATUS, 0xFFFEC60C
.equ HEX_03, 0xFF200020

_start:

ARRAY: .word 0x3F, 6, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F, 0x77, 0x7c, 0x39, 0x5E, 0x79, 0x71

LDR R0, =#200000000

	PUSH {LR}
	BL ARM_TIM_config_ASM
	POP {LR}
	MOV R9, #0
	
	
STOP_WATCH:
	PUSH {LR}
	BL ARM_TIM_read_INT_ASM
	POP {LR}
	
	CMP R0, #1
	BLEQ ARM_TIM_clear_INT_ASM
	ADDEQ R9, R9, #1

	CMP R9, #16
	MOVEQ R9, #0

	PUSH {LR}
	BL HEX_write_ASM
	POP {LR}
	
	PUSH {LR}
	BL write_LEDs_ASM
	POP {LR}

	MOV R0, #0
	B STOP_WATCH

write_LEDs_ASM:
	PUSH {R0}
	LDR R0, =LED_MEMORY
    STR R9, [R0]
	POP {R0}
	BX LR

ARM_TIM_config_ASM:
	PUSH {R2, R3, R4}
	LDR R2, =LOAD_ADDRESS
	LDR R3, =CONTROL_ADDRESS

	STR R0, [R2]
	MOV R4, #0b0000011
	STRB R4, [R3]
	POP {R2, R3, R4}
	BX LR

ARM_TIM_read_INT_ASM:
	PUSH {R2, R3}
	LDR R2, =INTERRUPT_STATUS
	LDR R0, [R2]
	POP {R2, R3}
	BX LR

ARM_TIM_clear_INT_ASM:
	PUSH {R2, R3}
	LDR R2, =INTERRUPT_STATUS
	MOV R3, #0x00000001
	STR R3, [R2]

	POP {R2, R3}
	BX LR

HEX_write_ASM:
	PUSH {R3, R5}
	LDR R3, =HEX_03

	CMP R9, #0
	MOVEQ R5, #0x3F
		STREQB R5, [R3]
	CMP R9, #1
	MOVEQ R5, #6
		STREQB R5, [R3]
	CMP R9, #2
	MOVEQ R5, #0x5B
		STREQB R5, [R3]
	CMP R9, #3
	MOVEQ R5, #0x4F
		STREQB R5, [R3]
	CMP R9, #4
	MOVEQ R5, #0x66
		STREQB R5, [R3]
	CMP R9, #5
	MOVEQ R5, #0x6D
		STREQB R5, [R3]
	CMP R9, #6
	MOVEQ R5, #0x7D
		STREQB R5, [R3]
	CMP R9, #7
	MOVEQ R5, #0x07
		STREQB R5, [R3]
	CMP R9, #8
	MOVEQ R5, #0x7F
		STREQB R5, [R3]
	CMP R9, #9
	MOVEQ R5, #0x6F
		STREQB R5, [R3]
	CMP R9, #10
	MOVEQ R5, #0x77
		STREQB R5, [R3]
	CMP R9, #11
	MOVEQ R5, #0x7c
		STREQB R5, [R3]
	CMP R9, #12
	MOVEQ R5, #0x39
		STREQB R5, [R3]
	CMP R9, #13
	MOVEQ R5, #0x5E
		STREQB R5, [R3]
	CMP R9, #14
	MOVEQ R5, #0x79
		STREQB R5, [R3]
	CMP R9, #15
	MOVEQ R5, #0x71
		STREQB R5, [R3]
	
	POP {R3, R5}
	BX LR

END:
	B END
